"use strict";
var path_1 = require('path');
var ts = require('typescript');
var refactor_1 = require('./refactor');
function _getContentOfKeyLiteral(source, node) {
    if (node.kind == ts.SyntaxKind.Identifier) {
        return node.text;
    }
    else if (node.kind == ts.SyntaxKind.StringLiteral) {
        return node.text;
    }
    else {
        return null;
    }
}
function findLazyRoutes(filePath, program, host) {
    var refactor = new refactor_1.TypeScriptFileRefactor(filePath, host, program);
    return refactor
        .findAstNodes(null, ts.SyntaxKind.ObjectLiteralExpression, true)
        .map(function (node) {
        return refactor.findAstNodes(node, ts.SyntaxKind.PropertyAssignment, false);
    })
        .reduce(function (acc, props) {
        return acc.concat(props.filter(function (literal) {
            return _getContentOfKeyLiteral(refactor.sourceFile, literal.name) == 'loadChildren';
        }));
    }, [])
        .filter(function (node) { return node.initializer.kind == ts.SyntaxKind.StringLiteral; })
        .map(function (node) { return node.initializer.text; })
        .map(function (routePath) {
        var moduleName = routePath.split('#')[0];
        var resolvedModuleName = moduleName[0] == '.'
            ? { resolvedModule: { resolvedFileName: path_1.join(path_1.dirname(filePath), moduleName) + '.ts' },
                failedLookupLocations: [] }
            : ts.resolveModuleName(moduleName, filePath, program.getCompilerOptions(), host);
        if (resolvedModuleName.resolvedModule
            && resolvedModuleName.resolvedModule.resolvedFileName
            && host.fileExists(resolvedModuleName.resolvedModule.resolvedFileName)) {
            return [routePath, resolvedModuleName.resolvedModule.resolvedFileName];
        }
        else {
            return [routePath, null];
        }
    })
        .reduce(function (acc, _a) {
        var routePath = _a[0], resolvedModuleName = _a[1];
        acc[routePath] = resolvedModuleName;
        return acc;
    }, {});
}
exports.findLazyRoutes = findLazyRoutes;
//# sourceMappingURL=/Users/hansl/Sources/angular-cli/packages/@ngtools/webpack/src/lazy_routes.js.map